.. _model:

Model
=====
For ease of use, all of Galpro's functionalities can be accessed using the ``Model`` class.

API documentation: Model
------------------------
.. autoclass:: galpro.model.Model
    :members:

Training model
--------------
To train a random forest model, the input and target training data are required. Besides this, the model must be given a
unique name using ``model_name``, and a list of all target features must be passed in via the ``target_features``
parameter::

    import galpro as gp

    target_features = ['$z$', '$\log(M_{\star} / M_{\odot})$']

    model = gp.Model(x_train, y_train, target_features, model_name='model')

The trained model is saved in the directory ``/galpro/model_name/`` as a ``.sav`` file. The ``Model`` class can also be used
to load a previously trained model by specifying its name via ``model_name``. Once a new model has been trained or a
previously trained model has been loaded, it can be tested. Naturally, the input and target testing data must be given
beforehand.

Testing model
-------------
The trained model can be used to generate point predictions and posterior PDFs using::

    model.point_estimate()
    model.posterior()

The point predictions are saved in a ``.npy`` (numpy array) file, and the PDFs are stored as ``.hd5`` (Hierarchical Data
Format) files in the subdirectories ``/galpro/model_name/point_estimates/`` and ``/galpro/model_name/posteriors/``
respectively.

Validating model
----------------
The posterior PDFs generated by the trained model can be validated using::

    model.validate()

Marginal PDFs are validated using the framework developed by
`Gneiting et al. (2007) <https://hal.archives-ouvertes.fr/file/index/docid/363242/filename/jrssb1b.pdf>`_,
and multivariate PDFs are
validated using the multivariate extension of the framework, developed by `Ziegel and Gneiting. (2014)
<https://projecteuclid.org/download/pdfview_1/euclid.ejs/1418313582>`_. A brief introduction to the methods can
be found in our paper (`Mucesh et al. 2020 <https://www.overleaf.com/project/5e1319fec29cb00001f15ded>`_). All
validation files are saved as ``.npy`` in the subdirectory ``/galpro/model_name/validation/``.

Plotting
--------
Galpro can generate various plots::

    model.plot.scatter() # Creates scatter plots of point predictions.
    model.plot.marginal() # Creates marginal PDF plots.
    model.plot.joint_pdf() # Creates joint PDF plots.
    model.plot.corner() # Creates a corner style plot for multivariate PDFs.
    model.plot.pit() # Plots the probability integral transform (PIT) distribution.
    model.plot.coppit() # Plots the copula probability integral transform (copPIT) distribution.
    model.marginal_calibration() # Plots the marginal calibration.
    model.kendall_calibration() # Plots the kendall calibration.

These plotting functions can take in two optional parameters which are ``show`` and ``save``. By default, these are set
to ``False`` and ``True`` respectively. All plots are saved in the ``/plots/`` folder in the respective subdirectory.
The same plots can also be created by setting ``make_plots=True`` when running ``model.point_estimate``,
``model.posterior`` or ``model.validate``.


Configuration
-------------
The hyperparameters associated with the random forest algorithm are defined in the ``conf.py`` file. We expect the
default hyperparameters to work well in most situations. However, if the user wishes to tune the hyperparameter to their
liking, they can do so by modifying their values in the configuration file before training a model.

The plotting aesthetics are also defined in the same configuration file. The user can tweak them to their preference by
stating the matplotlib or seaborn settings accordingly.
